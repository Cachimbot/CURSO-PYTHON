#!/usr/bin/env python
# -- coding: utf-8 --

import numpy as np
import datetime
import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt

#======================================================
# Reading efm time
#======================================================

time1 = np.loadtxt('/Users/FABRICIO/Desktop/Python/Datos_C_E/ENERO/ARCHIVO/ICA-11012021.efm', 
                    delimiter=',', unpack=True, skiprows =0,usecols=[0],dtype=bytes).astype(str)
hourday1=[]

for i in range(len(time1)):
  hour = datetime.datetime.strptime(time1[i],'%H:%M:%S')
  HH=(hour.strftime('%H'))
  MM=(hour.strftime('%M'))
  SS=(hour.strftime('%S'))
  hourday1.append(float(HH)+float(MM)/60.+float(SS)/3600.)

#======================================================
# Reading efm data
#======================================================
efm1,qq = np.loadtxt('/Users/FABRICIO/Desktop/Python/Datos_C_E/ENERO/ARCHIVO/ICA-11012021.efm',
                      delimiter=',', unpack=True, skiprows =0,usecols=[1,2])

y = []
for i in efm1:
  calibrado = ((i + (0.083670597)) / 4.8953412)*1000
  y.append(calibrado)

ejey_min = int(min(y))
ejey_max= int(max(y)) + 30


#======================================================
#Plotting
#======================================================
fig,ax = plt.subplots(1,1, figsize=(6,4))
ax.plot(hourday1,y,'b')
plt.subplots_adjust(left=None, bottom=0.148, right=None, top=None, wspace=None, hspace=None)

#======================================================
#Formato de hora en el eje x
#======================================================
hoursString = [f'{i:02}:00:00' for i in range(25)]
plt.xticks(range(0,25), hoursString,rotation=90)

#======================================================
#Definiendo nombres de ejes, guarda archivo.rango de los ejes.
#======================================================

ax.set_xlim([0,24])
ax.set_ylim(ejey_min, ejey_max)

fig.suptitle('11/01/2021')
plt.xlabel('Hour [UT]')
plt.ylabel('Electric field [V/m]')
plt.savefig('prueba.jpg',dpi=400)
plt.grid()
plt.show()

#======================================================
#Saving file
#======================================================
plt.savefig('plot_efm.eps')
